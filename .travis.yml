language: cpp
dist: xenial
notifications:
  email: false

# Define builds on mulitple OS/compiler combinations. 
# Feel free to add/remove entries from this list.
matrix:
  include:
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - lcov
            - doxygen
            - g++-7

      env:
        - MATRIX_EVAL="CXX_COMPILER=g++-7; BUILD_TYPE=Coverage; GEN_DOC=TRUE; sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 90"

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9

      env:
        - MATRIX_EVAL="CXX_COMPILER=g++-4.9; BUILD_TYPE=Release;"

    - os: linux
      compiler: clang

      env:
        - MATRIX_EVAL="CXX_COMPILER=clang++; BUILD_TYPE=Release;"
    
cache:
  directories:
    - $HOME/.local

before_install:
  - eval "${MATRIX_EVAL}"
  - PARENTDIR=$(pwd)
  - mkdir $PARENTDIR/build $HOME/cpm
  # Install a supported cmake version (>= 3.14)
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      mkdir -p $HOME/.local
      CMAKE_URL="https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.tar.gz"
      if [ ! -e $HOME/.local/bin/cmake ]; then
          echo "CMake not found in the cache, get and extract it..."
          travis_retry curl -L ${CMAKE_URL} \
              | tar -xz -C $HOME/.local --strip-components=1
      else
          echo "Using cached CMake"
      fi
    fi
  - cmake --version
  - g++ --version
  - clang++ --version
  - gcov --version
  
install:
  - cd $PARENTDIR/build
  - cmake $PARENTDIR -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=$CXX_COMPILER -DCPM_SOURCE_CACHE=$HOME/cpm
  - make -j4

script:
  - |
    if [[ "$GEN_DOC" == "TRUE" ]]; then
      cmake --build . --target doc
    fi
  - |
    if [[ "$BUILD_TYPE" == "Coverage" ]]; then
      make coverage
    else
      make test
    fi

after_success:
  - cd $PARENTDIR/build
  - |
    if [[ "$BUILD_TYPE" == "Coverage" ]]; then
      lcov --list coverage_out.info.cleaned  # Show test report in travis log.
      bash <(curl -s https://codecov.io/bash) -f coverage_out.info.cleaned || echo "Codecov did not collect coverage reports"
      #bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
    fi
deploy:
  provider: pages
  skip-cleanup: true
  github-token: $GITHUB_TOKEN #You will need to add your (ENCRYPTED if set in the .travis.yml) GH token as environment variable of your project
  keep-history: true
  on:
    branch: master
    condition: $GEN_DOC = TRUE
  local-dir: build/html
  
